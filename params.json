{"name":"Template-helpers","tagline":"Generic JavaScript helpers that can be used with any template engine. Handlebars, Lo-Dash, Underscore, or any engine that supports helper functions.","body":"# template-helpers [![NPM version](https://badge.fury.io/js/template-helpers.svg)](http://badge.fury.io/js/template-helpers)  [![Build Status](https://travis-ci.org/jonschlinkert/template-helpers.svg)](https://travis-ci.org/jonschlinkert/template-helpers) \r\n\r\n> Generic JavaScript helpers that can be used with any template engine. Handlebars, Lo-Dash, Underscore, or any engine that supports helper functions.\r\n\r\n## Install with [npm](npmjs.org)\r\n\r\n```bash\r\nnpm i template-helpers --save\r\n```\r\n\r\n## TOC\r\n\r\n<!-- toc -->\r\n\r\n- [Usage](#usage)\r\n  * [Use with any template engine](#use-with-any-template-engine)\r\n  * [Namespacing](#namespacing)\r\n- [Code coverage](#code-coverage)\r\n- [Docs](#docs)\r\n- [Related projects](#related-projects)\r\n- [Running tests](#running-tests)\r\n- [Contributing](#contributing)\r\n- [Author](#author)\r\n- [License](#license)\r\n\r\n_(Table of contents generated by [verb])_\r\n\r\n<!-- tocstop -->\r\n\r\n## Usage\r\n\r\nTo get all helpers grouped by collection:\r\n\r\n```js\r\nvar helpers = require('template-helpers');\r\n\r\n// All helpers are on the `_` property\r\nconsole.log(helpers._);\r\n```\r\n\r\n**Get a specific collection**\r\n\r\n```js\r\nvar helpers = require('template-helpers');\r\n\r\n// get only the math helpers\r\nvar math = helpers.math;\r\n```\r\n\r\n### Use with any template engine\r\n\r\n**Lo-Dash Example**\r\n\r\n```js\r\nvar context = {arr: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']};\r\n\r\n// pass helpers on `imports`\r\nvar imports = {imports: helpers.arrays};\r\nvar template = _.template('<%= first(foo) %>', imports);\r\n\r\n// pass context\r\ntemplate({foo: ['a', 'b', 'c']});\r\n//=> 'a'\r\n```\r\n\r\n### Namespacing \r\n\r\nHandlebars and Lo-Dash both allow **dot notation** to be used for referencing helpers. Other engines may allow this too, I'd be happy to add this information to readme if someone wants to do a PR.\r\n\r\n**Example**\r\n\r\n```js\r\n<%= path.dirname(\"a/b/c/d.js\") %>\r\n```\r\n\r\nThis can be used as a way of working around potential naming conflicts. \r\n\r\n## Code coverage\r\n\r\n```\r\nStatements   : 97.58% ( 363/372 )\r\nBranches     : 96.92% ( 189/195 )\r\nFunctions    : 98.78% ( 81/82 )\r\nLines        : 97.2% ( 312/321 )\r\n```\r\n\r\n## Docs\r\n\r\n### [.isArray](lib/array.js#L22)\r\n\r\nReturns true if `value` is an array.\r\n\r\n**Params**\r\n\r\n* `value` **{*}**: The value to test.    \r\n* `returns` **{Boolean}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= isArray('a, b, c') %>\r\n//=> 'false'\r\n\r\n<%= isArray(['a, b, c']) %>\r\n//=> 'true'\r\n```\r\n\r\n### [.arrayify](lib/array.js#L46)\r\n\r\nCast `val` to an array.\r\n\r\n**Params**\r\n\r\n* `val` **{*}**: The value to arrayify.    \r\n* `returns` **{Array}**: An array.  \r\n* `returns` **{Array}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= arrayify('a') %>\r\n//=> '[\"a\"]'\r\n\r\n<%= arrayify({a: 'b'}) %>\r\n//=> '[{a: \"b\"}]'\r\n\r\n<%= arrayify(['a')] %>\r\n//=> '[\"a\"]'\r\n```\r\n\r\n### [.first](lib/array.js#L64)\r\n\r\nReturns the first item, or first `n` items of an array.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**    \r\n* `n` **{Number}**: Number of items to return, starting at `0`.    \r\n* `returns` **{Array}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= first(['a', 'b', 'c', 'd', 'e'], 2) %>\r\n//=> '[\"a\", \"b\"]'\r\n```\r\n\r\n### [.last](lib/array.js#L87)\r\n\r\nReturns the last item, or last `n` items of an array.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**    \r\n* `n` **{Number}**: Number of items to return, starting with the last item.    \r\n* `returns` **{Array}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= last(['a', 'b', 'c', 'd', 'e'], 2) %>\r\n//=> '[\"d\", \"e\"]'\r\n```\r\n\r\n### [.before](lib/array.js#L112)\r\n\r\nReturns all of the items in an array up to the specified number Opposite of `<%= after() %`.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**    \r\n* `n` **{Number}**    \r\n* `returns` **{Array}**: Array excluding items after the given number.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= before(['a', 'b', 'c'], 2) %>\r\n//=> '[\"a\", \"b\"]'\r\n```\r\n\r\n### [.after](lib/array.js#L133)\r\n\r\nReturns all of the items in an arry after the specified index. Opposite of `<%= before() %`.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**: Collection    \r\n* `n` **{Number}**: Starting index (number of items to exclude)    \r\n* `returns` **{Array}**: Array exluding `n` items.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= after(['a', 'b', 'c'], 1) %>\r\n//=> '[\"c\"]'\r\n```\r\n\r\n### [.map](lib/array.js#L161)\r\n\r\nReturns a new array, created by calling `function` on each element of the given `array`.\r\n\r\nAssuming that `double` has been registered as a helper:\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**    \r\n* `fn` **{String}**: The function to    \r\n* `returns` **{String}**  \r\n\r\n**Examples**\r\n\r\n```js\r\nfunction double(str) {\r\n  return str + str;\r\n}\r\n```\r\n\r\n```js\r\n<%= map(['a', 'b', 'c'], double) %>\r\n//=> '[\"aa\", \"bb\", \"cc\"]'\r\n```\r\n\r\n### [.join](lib/array.js#L192)\r\n\r\nJoin all elements of array into a string, optionally using a given separator.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**    \r\n* `sep` **{String}**: The separator to use.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= join(['a', 'b', 'c']) %>\r\n//=> 'a, b, c'\r\n\r\n<%= join(['a', 'b', 'c'], '-') %>\r\n//=> 'a-b-c'\r\n```\r\n\r\n### [.sort](lib/array.js#L219)\r\n\r\nSort the given `array`. If an array of objects is passed, you may optionally pass a `key` to sort on as the second argument. You may alternatively pass a sorting function as the second argument.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**: the array to sort.    \r\n* `key` **{String|Function}**: The object key to sort by, or sorting function.    \r\n\r\n**Example**\r\n\r\n```js\r\n<%= sort([\"b\", \"a\", \"c\"]) %>\r\n//=> 'a,b,c'\r\n\r\n<%= sort([{a: \"zzz\"}, {a: \"aaa\"}], \"a\") %>\r\n//=> '[{\"a\":\"aaa\"},{\"a\":\"zzz\"}]'\r\n```\r\n\r\n### [.length](lib/array.js#L245)\r\n\r\nReturns the length of the given array.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**    \r\n* `returns` **{Number}**: The length of the array.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= length(['a', 'b', 'c']) %>\r\n//=> 3\r\n```\r\n\r\n### [.compact](lib/array.js#L263)\r\n\r\nReturns an array with all falsey values removed.\r\n\r\n**Params**\r\n\r\n* `arr` **{Array}**    \r\n* `returns` **{Array}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= compact([null, a, undefined, 0, false, b, c, '']) %>\r\n//=> '[\"a\", \"b\", \"c\"]'\r\n```\r\n\r\n### [.difference](lib/array.js#L283)\r\n\r\nReturn the difference between the first array and additional arrays.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**: The array to compare againts.    \r\n* `arrays` **{Array}**: One or more additional arrays.    \r\n* `returns` **{Array}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= difference([\"a\", \"c\"], [\"a\", \"b\"]) %>\r\n//=> '[\"c\"]'\r\n```\r\n\r\n### [.unique](lib/array.js#L319)\r\n\r\nReturn an array, free of duplicate values.\r\n\r\n**Params**\r\n\r\n* `array` **{Array}**: The array to uniquify    \r\n* `returns` **{Array}**: Duplicate-free array  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= unique(['a', 'b', 'c', 'c']) %\r\n=> '[\"a\", \"b\", \"c\"]'\r\n```\r\n\r\n### [.union](lib/array.js#L350)\r\n\r\nReturns an array of unique values using strict equality for comparisons.\r\n\r\n**Params**\r\n\r\n* `arr` **{Array}**    \r\n* `returns` **{Array}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= union([\"a\"], [\"b\"], [\"c\"]) %>\r\n//=> '[\"a\", \"b\", \"c\"]'\r\n```\r\n\r\n### [.shuffle](lib/array.js#L369)\r\n\r\nShuffle the items in an array.\r\n\r\n**Params**\r\n\r\n* `arr` **{Array}**    \r\n* `returns` **{Array}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= shuffle([\"a\", \"b\", \"c\"]) %>\r\n//=> [\"c\", \"a\", \"b\"]\r\n```\r\n\r\n### [.embed](lib/code.js#L25)\r\n\r\nEmbed code from an external file as preformatted text.\r\n\r\n**Params**\r\n\r\n* `fp` **{String}**: filepath to the file to embed.    \r\n* `language` **{String}**: Optionally specify the language to use for syntax highlighting.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= embed('path/to/file.js') %>\r\n\r\n// specify the language to use\r\n<%= embed('path/to/file.hbs', 'html') %>\r\n```\r\n\r\n### [.jsfiddle](lib/code.js#L51)\r\n\r\nGenerate the HTML for a jsFiddle link with the given `params`\r\n\r\n**Params**\r\n\r\n* `params` **{Object}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= jsfiddle({id: '0dfk10ks', {tabs: true}}) %>\r\n```\r\n\r\n### [.any](lib/collection.js#L15)\r\n\r\nReturns `true` if `value` exists in the given string, array\r\nor object. See [any] for documentation.\r\n\r\n**Params**\r\n\r\n* `value` **{*}**    \r\n* `target` **{*}**    \r\n* `options` **{Object}**    \r\n\r\n### [._if](lib/conditional.js#L13)\r\n\r\nReturn true if `key` is an own, enumerable property\r\nof the given `obj`.\r\n\r\n**Params**\r\n\r\n* `object` **{Object}**    \r\n* `key` **{String}**    \r\n* `returns` **{Boolean}**  \r\n\r\n### [.read](lib/fs.js#L18)\r\n\r\nRead a file from the file system and inject its content\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**: Path of the file to read.    \r\n* `returns` **{String}**: Contents of the given file.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= read(\"foo.js\") %>\r\n```\r\n\r\n### [.escapeHtml](lib/html.js#L18)\r\n\r\nEscape HTML characters in a string.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**: String of HTML with characters to escape.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= escapeHtml(\"<span>foo</span>\") %>\r\n//=> &lt;span&gt;foo&lt;&#x2F;span&gt;\r\n```\r\n\r\n### [.sanitize](lib/html.js#L46)\r\n\r\nStrip HTML tags from a string, so that only the text nodes are preserved.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**: The string of HTML to sanitize.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= sanitize(\"<span>foo</span>\") %>\r\n//=> 'foo'\r\n```\r\n\r\n### [.add](lib/math.js#L19)\r\n\r\nReturn the product of `a` plus `b`.\r\n\r\n**Params**\r\n\r\n* `a` **{Number}**    \r\n* `b` **{Number}**    \r\n\r\n**Example**\r\n\r\n```js\r\n<%= add(1, 2) %>\r\n//=> '3'\r\n```\r\n\r\n### [.subtract](lib/math.js#L36)\r\n\r\nSubtract `b` from `a`.\r\n\r\n**Params**\r\n\r\n* `a` **{Number}**    \r\n* `b` **{Number}**    \r\n\r\n**Example**\r\n\r\n```js\r\n<%= subtract(5, 2) %>\r\n//=> '3'\r\n```\r\n\r\n### [.divide](lib/math.js#L54)\r\n\r\nDivide `a` (the numerator) by `b` (the divisor).\r\n\r\n**Params**\r\n\r\n* `a` **{Number}**: the numerator.    \r\n* `b` **{Number}**: the divisor.    \r\n* `returns` **{Number}**: The quotient of `a` divided by `b`.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= divide(10, 2) %>\r\n//=> '5'\r\n```\r\n\r\n### [.multiply](lib/math.js#L72)\r\n\r\nMultiply `a` by `b`.\r\n\r\n**Params**\r\n\r\n* `a` **{Number}**    \r\n* `b` **{Number}**    \r\n* `returns` **{Number}**: The product of `a` times `b`.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= divide(10, 2) %>\r\n//=> '5'\r\n```\r\n\r\n### [.floor](lib/math.js#L90)\r\n\r\nReturns the largest integer less than or equal to the given `number`.\r\n\r\n**Params**\r\n\r\n* `number` **{Number}**    \r\n* `returns` **{Number}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= floor(10.6) %>\r\n//=> '10'\r\n```\r\n\r\n### [.ceil](lib/math.js#L108)\r\n\r\nReturns the smallest integer greater than or equal to the given `number`.\r\n\r\n**Params**\r\n\r\n* `number` **{Number}**    \r\n* `returns` **{Number}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= ceil(10.1) %>\r\n//=> '11'\r\n```\r\n\r\n### [.round](lib/math.js#L129)\r\n\r\nReturns the value of the given `number` rounded to the nearest integer.\r\n\r\n**Params**\r\n\r\n* `number` **{Number}**    \r\n* `returns` **{Number}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= round(10.1) %>\r\n//=> '10'\r\n\r\n<%= round(10.5) %>\r\n//=> '11'\r\n```\r\n\r\n### [.sum](lib/math.js#L146)\r\n\r\nReturns the sum of all numbers in the given array.\r\n\r\n**Params**\r\n\r\n* `number` **{Number}**    \r\n* `returns` **{Number}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= sum([1, 2, 3, 4, 5]) %>\r\n//=> '15'\r\n```\r\n\r\n### [.fallback](lib/object.js#L25)\r\n\r\nSpecify a fallback value to use when the desired value is undefined. Note that undefined variables that are _not object properties_ with throw an error.\r\n\r\n**Params**\r\n\r\n* `a` **{*}**: The desired value.    \r\n* `b` **{*}**: The fallback (\"default\") value    \r\n* `returns` **{*}**: Either `a` or `b`  \r\n\r\n**Example**\r\n\r\n```js\r\n// when `title` is undefined, use the generic `site.title`\r\n<%= fallback(page.title, site.title) %>\r\n```\r\n\r\n### [.stringify](lib/object.js#L42)\r\n\r\nStringify an object using `JSON.stringify()`.\r\n\r\n**Params**\r\n\r\n* `object` **{Object}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= stringify({a: \"a\"}) %>\r\n//=> '{\"a\":\"a\"}'\r\n```\r\n\r\n### [.parse](lib/object.js#L59)\r\n\r\nParse a string into an object using `JSON.parse()`.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**: The string to parse.    \r\n* `returns` **{Object}**: The parsed object.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= parse('{\"foo\":\"bar\"}')[\"foo\"] %>\r\n//=> 'bar'\r\n```\r\n\r\n### [.get](lib/object.js#L77)\r\n\r\nUse property paths (`a.b.c`) get a nested value from an object.\r\n\r\n**Params**\r\n\r\n* `object` **{Object}**    \r\n* `path` **{String}**: Dot notation for the property to get.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= get({a: {b: 'c'}}, 'a.b') %>\r\n//=> 'c'\r\n```\r\n\r\n### [.keys](lib/object.js#L94)\r\n\r\nReturns an array of keys from the given `object`.\r\n\r\n**Params**\r\n\r\n* `object` **{Object}**    \r\n* `returns` **{Array}**: Keys from `object`  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= keys({a: 'b', c: 'd'}) %>\r\n//=> '[\"a\", \"c\"]'\r\n```\r\n\r\n### [.isObject](lib/object.js#L115)\r\n\r\nReturn true if the given `value` is an object, and not `null` or an array.\r\n\r\n**Params**\r\n\r\n* `value` **{Object}**: The value to check.    \r\n* `returns` **{Boolean}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= isObject(['a', 'b', 'c']) %>\r\n//=> 'false'\r\n\r\n<%= isObject({a: 'b'}) %>\r\n//=> 'true'\r\n```\r\n\r\n### [.isPlainObject](lib/object.js#L138)\r\n\r\nReturn true if the given `value` is a plain object.\r\n\r\n**Params**\r\n\r\n* `value` **{Object}**: The value to check.    \r\n* `returns` **{Boolean}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= isPlainObject(['a', 'b', 'c']) %>\r\n//=> 'false'\r\n\r\n<%= isPlainObject({a: 'b'}) %>\r\n//=> 'true'\r\n\r\n<%= isPlainObject(/foo/g) %>\r\n//=> 'false'\r\n```\r\n\r\n### [.hasOwn](lib/object.js#L152)\r\n\r\nReturn true if `key` is an own, enumerable property\r\nof the given `obj`.\r\n\r\n**Params**\r\n\r\n* `object` **{Object}**    \r\n* `key` **{String}**    \r\n* `returns` **{Boolean}**  \r\n\r\n### [.omit](lib/object.js#L170)\r\n\r\nReturn a copy of `object` exclusing the given `keys`.\r\n\r\n**Params**\r\n\r\n* `object` **{Object}**: Object with keys to omit.    \r\n* `keys` **{String}**: Keys to omit.    \r\n* `returns` **{Boolean}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= omit({a: 'a', b: 'b', c: 'c'}, ['a', 'c']) %>\r\n//=> '{b: \"b\"}'\r\n```\r\n\r\n### [.extend](lib/object.js#L183)\r\n\r\nExtend `o` with properties of other `objects`.\r\n\r\n**Params**\r\n\r\n* `o` **{Object}**: The target object. Pass an empty object to shallow clone.    \r\n* `objects` **{Object}**    \r\n* `returns` **{Object}**  \r\n\r\n### [.merge](lib/object.js#L212)\r\n\r\nRecursively combine the properties of `o` with the\r\nproperties of other `objects`.\r\n\r\n**Params**\r\n\r\n* `o` **{Object}**: The target object. Pass an empty object to shallow clone.    \r\n* `objects` **{Object}**    \r\n* `returns` **{Object}**  \r\n\r\n### [.dirname](lib/path.js#L20)\r\n\r\nReturn the dirname for the given `filepath`. Uses the node.js [path] module.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns the directory part of the file path.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= dirname(\"a/b/c/d\") %>\r\n//=> 'a/b/c'\r\n```\r\n\r\n### [.basename](lib/path.js#L38)\r\n\r\nReturn the basename for the given `filepath`. Uses the node.js [path] module.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns the basename part of the file path.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= basename(\"a/b/c/d.js\") %>\r\n//=> 'd.js'\r\n```\r\n\r\n### [.filename](lib/path.js#L56)\r\n\r\nReturn the filename for the given `filepath`, excluding extension.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns the file name part of the file path.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= basename(\"a/b/c/d.js\") %>\r\n//=> 'd'\r\n```\r\n\r\n### [.extname](lib/path.js#L74)\r\n\r\nReturn the file extension for the given `filepath`. Uses the node.js [path] module.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns a file extension  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= extname(\"foo.js\") %>\r\n//=> '.js'\r\n```\r\n\r\n### [.ext](lib/path.js#L92)\r\n\r\nReturn the file extension for the given `filepath`, excluding the `.`.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns a file extension without dot.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= ext(\"foo.js\") %>\r\n//=> 'js'\r\n```\r\n\r\n### [.resolve](lib/path.js#L110)\r\n\r\nResolves the given paths to an absolute path. Uses the node.js [path] module.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns a resolve  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= resolve('/foo/bar', './baz') %>\r\n//=> '/foo/bar/baz'\r\n```\r\n\r\n### [.relative](lib/path.js#L129)\r\n\r\nGet the relative path from file `a` to file `b`. Typically `a` and `b` would be variables passed on the context. Uses the node.js [path] module.\r\n\r\n**Params**\r\n\r\n* `a` **{String}**: The \"from\" file path.    \r\n* `b` **{String}**: The \"to\" file path.    \r\n* `returns` **{String}**: Returns a relative path.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= relative(a, b) %>\r\n```\r\n\r\n### [.segments](lib/path.js#L153)\r\n\r\nGet specific (joined) segments of a file path by passing a range of array indices.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**: The file path to split into segments.    \r\n* `returns` **{String}**: Returns a single, joined file path.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= segments(\"a/b/c/d\", \"2\", \"3\") %>\r\n//=> 'c/d'\r\n\r\n<%= segments(\"a/b/c/d\", \"1\", \"3\") %>\r\n//=> 'b/c/d'\r\n\r\n<%= segments(\"a/b/c/d\", \"1\", \"2\") %>\r\n//=> 'b/c'\r\n```\r\n\r\n### [.join](lib/path.js#L175)\r\n\r\nJoin all arguments together and normalize the resulting `filepath`. Uses the node.js [path] module.\r\n\r\n**Note**: there is also a `join()` array helper, dot notation\r\ncan be used with helpers to differentiate. Example: `<%= path.join() %>`.\r\n\r\n**Params**\r\n\r\n* `filepaths` **{String}**: List of file paths.    \r\n* `returns` **{String}**: Returns a single, joined file path.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= join(\"a\", \"b\") %>\r\n//=> 'a/b'\r\n```\r\n\r\n### [.isAbsolute](lib/path.js#L210)\r\n\r\nReturns true if a file path is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory. Uses the node.js [path] module.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns a resolve  \r\n\r\n**Example**\r\n\r\n```js\r\n// posix\r\n<%= isAbsolute('/foo/bar') %>\r\n//=> 'true'\r\n<%= isAbsolute('qux/') %>\r\n//=> 'false'\r\n<%= isAbsolute('.') %>\r\n//=> 'false'\r\n\r\n// Windows\r\n<%= isAbsolute('//server') %>\r\n//=> 'true'\r\n<%= isAbsolute('C:/foo/..') %>\r\n//=> 'true'\r\n<%= isAbsolute('bar\\\\baz') %>\r\n//=> 'false'\r\n<%= isAbsolute('.') %>\r\n//=> 'false'\r\n```\r\n\r\n### [.isRelative](lib/path.js#L245)\r\n\r\nReturns true if a file path is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory. Uses the node.js [path] module.\r\n\r\n**Params**\r\n\r\n* `filepath` **{String}**    \r\n* `returns` **{String}**: Returns a resolve  \r\n\r\n**Example**\r\n\r\n```js\r\n// posix\r\n<%= isRelative('/foo/bar') %>\r\n//=> 'false'\r\n<%= isRelative('qux/') %>\r\n//=> 'true'\r\n<%= isRelative('.') %>\r\n//=> 'true'\r\n\r\n// Windows\r\n<%= isRelative('//server') %>\r\n//=> 'false'\r\n<%= isRelative('C:/foo/..') %>\r\n//=> 'false'\r\n<%= isRelative('bar\\\\baz') %>\r\n//=> 'true'\r\n<%= isRelative('.') %>\r\n//=> 'true'\r\n```\r\n\r\n### [.isString](lib/string.js#L24)\r\n\r\nReturns true if the value is a string.\r\n\r\n**Params**\r\n\r\n* `val` **{String}**    \r\n* `returns` **{Boolean}**: True if the value is a string.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= isString('abc') %>\r\n//=> 'true'\r\n\r\n<%= isString(null) %>\r\n//=> 'false'\r\n```\r\n\r\n### [.lowercase](lib/string.js#L41)\r\n\r\nLowercase the characters in the given `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**: The string to lowercase.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= lowercase(\"ABC\") %>\r\n//=> 'abc'\r\n```\r\n\r\n### [.uppercase](lib/string.js#L59)\r\n\r\nUppercase the characters in a string.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**: The string to uppercase.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= uppercase(\"abc\") %>\r\n//=> 'ABC'\r\n```\r\n\r\n### [.trim](lib/string.js#L78)\r\n\r\nTrim extraneous whitespace from the beginning and end of a string.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**: The string to trim.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= trim(\"  ABC   \") %>\r\n//=> 'ABC'\r\n```\r\n\r\n### [.chop](lib/string.js#L103)\r\n\r\nLike trim, but removes both extraneous whitespace and non-word characters from the beginning and end of a string.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**: The string to chop.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= chop(\"_ABC_\") %>\r\n//=> 'ABC'\r\n\r\n<%= chop(\"-ABC-\") %>\r\n//=> 'ABC'\r\n\r\n<%= chop(\" ABC \") %>\r\n//=> 'ABC'\r\n```\r\n\r\n### [.stripIndent](lib/string.js#L122)\r\n\r\nStrip the indentation from a `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**: The string to strip indentation from.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= stripIndent(\"  _ABC_\") %>\r\n//=> 'ABC'\r\n```\r\n\r\n### [.camelcase](lib/string.js#L140)\r\n\r\ncamelCase the characters in `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**: The string to camelcase.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= camelcase(\"foo bar baz\") %>\r\n//=> 'fooBarBaz'\r\n```\r\n\r\n### [.pascalcase](lib/string.js#L162)\r\n\r\nPascalCase the characters in `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= pascalcase(\"foo bar baz\") %>\r\n//=> 'FooBarBaz'\r\n```\r\n\r\n### [.snakecase](lib/string.js#L182)\r\n\r\nsnake_case the characters in `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= snakecase(\"a-b-c d_e\") %>\r\n//=> 'a_b_c_d_e'\r\n```\r\n\r\n### [.dotcase](lib/string.js#L204)\r\n\r\ndot.case the characters in `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= dotcase(\"a-b-c d_e\") %>\r\n//=> 'a.b.c.d.e'\r\n```\r\n\r\n### [.dashcase](lib/string.js#L228)\r\n\r\ndash-case the characters in `string`. This is similar to [slugify], but [slugify] makes the string compatible to be used as a URL slug.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= dashcase(\"a b.c d_e\") %>\r\n//=> 'a-b-c-d-e'\r\n```\r\n\r\n### [.pathcase](lib/string.js#L250)\r\n\r\npath/case the characters in `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= pathcase(\"a-b-c d_e\") %>\r\n//=> 'a/b/c/d/e'\r\n```\r\n\r\n### [.sentencecase](lib/string.js#L272)\r\n\r\nSentence-case the characters in `string`.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= sentencecase(\"foo bar baz.\") %>\r\n//=> 'Foo bar baz.'\r\n```\r\n\r\n### [.hyphenate](lib/string.js#L291)\r\n\r\nReplace spaces in a string with hyphens. This\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= hyphenate(\"a b c\") %>\r\n//=> 'a-b-c'\r\n```\r\n\r\n### [.wordwrap](lib/string.js#L330)\r\n\r\nWrap words to a specified width using [word-wrap].\r\n\r\n**Params**\r\n\r\n* `string` **{String}**: The string with words to wrap.    \r\n* `object` **{Options}**: Options to pass to [word-wrap]    \r\n* `returns` **{String}**: Formatted string.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= wordwrap(\"a b c d e f\", {width: 5, newline: '<br>  '}) %>\r\n//=> '  a b c <br>  d e f'\r\n```\r\n\r\n### [.count](lib/string.js#L350)\r\n\r\nCount the number of occurrances of a substring within a string.\r\n\r\n**Params**\r\n\r\n* `string` **{String}**    \r\n* `substring` **{String}**    \r\n* `returns` **{Number}**: The occurances of `substring` in `string`  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= count(\"abcabcabc\", \"a\") %>\r\n//=> '3'\r\n```\r\n\r\n### [.reverse](lib/string.js#L368)\r\n\r\nReverse the characters in a string.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**: The string to reverse.    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= reverse(\"abc\") %>\r\n//=> 'cba'\r\n```\r\n\r\n### [.rightAlign](lib/string.js#L387)\r\n\r\nRight align the characters in a string using non-breaking spaces.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**: The string to reverse.    \r\n* `returns` **{String}**: Right-aligned string.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= rightAlign(str) %>\r\n```\r\n\r\n### [.centerAlign](lib/string.js#L406)\r\n\r\nCenter align the characters in a string using non-breaking spaces.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**: The string to reverse.    \r\n* `returns` **{String}**: Centered string.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= centerAlign(\"abc\") %>\r\n```\r\n\r\n### [.replace](lib/string.js#L426)\r\n\r\nReplace occurrences of `a` with `b`.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**    \r\n* `a` **{String|RegExp}**: Can be a string or regexp.    \r\n* `b` **{String}**    \r\n* `returns` **{String}**  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= replace(\"abcabc\", /a/, \"z\") %>\r\n//=> 'zbczbc'\r\n```\r\n\r\n### [.truncate](lib/string.js#L448)\r\n\r\nTruncate a string by removing all HTML tags and limiting the result to the specified `length`.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**    \r\n* `length` **{Number}**: The desired length of the returned string.    \r\n* `returns` **{String}**: The truncated string.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= truncate(\"<span>foo bar baz</span>\", 7) %>\r\n//=> 'foo bar'\r\n```\r\n\r\n### [.ellipsis](lib/string.js#L469)\r\n\r\nTruncate a string to the specified `length`, and append it with an elipsis, `…`.\r\n\r\n**Params**\r\n\r\n* `str` **{String}**    \r\n* `length` **{Number}**: The desired length of the returned string.    \r\n* `ch` **{String}**: Optionally pass custom characters to append. Default is `…`.    \r\n* `returns` **{String}**: The truncated string.  \r\n\r\n**Example**\r\n\r\n```js\r\n<%= ellipsis(\"<span>foo bar baz</span>\", 7) %>\r\n//=> 'foo bar…'\r\n```\r\n\r\n## Related projects\r\n\r\n* [handlebars-helpers](https://github.com/assemble/handlebars-helpers): 120+ Handlebars helpers in ~20 categories, for Assemble, YUI, Ghost… [more](https://github.com/assemble/handlebars-helpers)\r\n* [utils](https://github.com/jonschlinkert/utils): Fast, generic JavaScript/node.js utility functions.\r\n\r\nAlso take a look at the [helpers org](https://github.com/helpers), there are dozens of specialized helpers that can be downloaded individually.\r\n\r\n## Running tests\r\n\r\nInstall dev dependencies:\r\n\r\n```bash\r\nnpm i -d && npm test\r\n```\r\n\r\n## Contributing\r\n\r\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/template-helpers/issues)\r\n\r\n## Author\r\n\r\n**Jon Schlinkert**\r\n\r\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\r\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Jon Schlinkert\r\nReleased under the MIT license.\r\n\r\n***\r\n\r\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on April 25, 2015._\r\n\r\n[assemble]: https://github.com/assemble/assemble\r\n[api-toc]: https://github.com/jonschlinkert/api-toc\r\n[verb]: https://github.com/assemble/verb\r\n[template]: https://github.com/jonschlinkert/template\r\n[word-wrap]: https://github.com/jonschlinkert/word-wrap\r\n[helper-concat]: https://github.com/helpers/helper-concat\r\n[path]: https://nodejs.org/api/path.html\r\n\r\n[any]: https://github.com/jonschlinkert/any\r\n[arr-flatten]: https://github.com/jonschlinkert/arr-flatten\r\n[center-align]: https://github.com/jonschlinkert/center-align\r\n[export-files]: https://github.com/jonschlinkert/export-files\r\n[get-value]: https://github.com/jonschlinkert/get-value\r\n[is-number]: https://github.com/jonschlinkert/is-number\r\n[is-plain-object]: https://github.com/jonschlinkert/is-plain-object\r\n[isobject]: https://github.com/jonschlinkert/isobject\r\n[kind-of]: https://github.com/jonschlinkert/kind-of\r\n[object]: https://github.com/jonschlinkert/object\r\n[relative]: https://github.com/jonschlinkert/relative\r\n[right-align]: https://github.com/jonschlinkert/right-align\r\n[strip-indent]: https://github.com/sindresorhus/strip-indent\r\n[to-gfm-code-block]: https://github.com/jonschlinkert/to-gfm-code-block\r\n[word-wrap]: https://github.com/jonschlinkert/word-wrap\r\n\r\n<!-- reflinks generated by verb-reflinks plugin -->\r\n\r\n[verb]: https://github.com/assemble/verb\r\n[template]: https://github.com/jonschlinkert/template\r\n[assemble]: http://assemble.io","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}